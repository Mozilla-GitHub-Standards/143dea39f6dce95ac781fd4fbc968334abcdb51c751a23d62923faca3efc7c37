---

- name: determine if running in Docker
  stat: path=/vct
  register: vct_dir

- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    # This is likely already installed, but needed for Docker.
    - cronie
    # To compile hg-experimental extensions.
    - gcc-c++
    - httpd
    # To build mod_wsgi from source so it can be placed in virtualenvs.
    - httpd-devel
    # Provides `setcap` utility.
    - libcap
    # Secures processes, especially moz.build evaluation.
    - libcgroup
    # To compile hg-experimental extensions.
    - lz4-devel
    # We use logrotate to control log files
    - logrotate
    - openssh-clients
    - openssh-server
    # To compile hg-experimental extensions.
    - openssl-devel
    - python-devel
    - python36u
    - python36u-pip
    - rsync
    # Needed for hg user to execute mozbuild-eval as root.
    - rsyslog
    - sudo
    - tar
    - yum-plugin-versionlock

- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    - libcgroup-tools

- name: ensure critical system packages are locked so they aren't auto-upgraded
  command: /usr/bin/yum versionlock add {{ item }}
  with_items:
    # Important server functionality uses Python 2 and upgrading the Python
    # package can be sensitive. So we lock the package version so it isn't
    # upgraded as part of upgrading other system packages.
    - python-2.7.*
    - python-devel-2.7.*
    - python-libs-2.7.*

- name: install global ssh config
  copy: src=ssh_config
        dest=/etc/ssh/ssh_config
        owner=root
        group=root
        mode=0640

# We need to ensure that a hg user/group exists to own many resources.
# The uid and gid match what comes from Puppet, since Puppet manages
# users in production.
- name: hg group exists
  group: name=hg
         gid=5507

- name: create hg user
  user: name=hg
        group=hg
        uid=5507
        shell=/bin/bash
        comment="Hg user"

# The hg user performs replication via SSHing into a central server.
# Set up its SSH configuration.
- name: create .ssh directory for hg user
  file: path=/home/hg/.ssh
        owner=hg
        group=hg
        mode=0750
        state=directory

- name: install hg user ssh config
  copy: src=hg-ssh-config
        dest=/home/hg/.ssh/config
        owner=hg
        group=hg
        mode=0640

- name: ensure known hosts file for hg user exists
  file: path=/home/hg/.ssh/known_hosts
        state=touch
        owner=hg
        group=hg
        mode=0640

- name: install rsyslog policy for hg
  copy: src=rsyslog-hg.conf
        dest=/etc/rsyslog.d/hg.conf
        owner=root
        group=root
        mode=0644
  notify: restart rsyslogd

# There are /repo_local and /repo directories for historical reasons.
# Back in the day /repo was mounted from NFS and was a read-only
# filesystem and /repo_local was a local, read-write copy. Now, /repo
# just has symlinks to /repo_local. We carry forward the legacy
# configuration until we take the effort to move files around on the
# servers.
#
# There is also an unused level of indirection. The servers used to host
# multiple vhosts and subdirectories of /repo and /repo_local
# corresponded to the vhost they were serving.

- name: create root directories for hg files
  file: path={{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - /repo
    - /repo_local

- name: create directories for hg files
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo_local/mozilla/mozilla
    - /repo_local/mozilla/scripts
    - /repo_local/mozilla/webroot_wsgi
    # make_user_wsgi_dirs.sh expects this to exist.
    - /repo_local/mozilla/webroot_wsgi/users
    - /var/hg

- name: symlink /repo/hg to /repo_local/mozilla
  file: src=/repo_local/mozilla dest=/repo/hg state=link

# We need to add a ssh auhorized_keys to ensure the master can connect
# in to trigger a mirror pull
- name: add authorized_keys for hg user
  authorized_key: user=hg
                  key_options='command="/usr/local/bin/mirror-pull -t /repo_local/mozilla/mozilla $SSH_ORIGINAL_COMMAND",no-pty,no-x11-forwarding,no-agent-forwarding'
                  key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDoGUKeheEfmCr0GXxt3DyFXjmxzE9y1z0l1laNjNl6X++1ymj9MwrrSPewDJ+fzKWl+/1tFf9LwHlnndJib4DKrcqdzvJeU1CYBQ+xt9sk0DZdizcaCpYJI4Dpk9ysGLUOd3km9dp7LsXjJ/c6NQdZpICOnCWvBOwTgg++wUfBCymMpi2mab+QhUjDcBp/LUbJOtvEE/cppvDLMATmJfIaaGCNfka2TGVRec744UC6RqahZ/mcxe6TnltqujYjo1yBMGJ4gS2rAw5U+0nLqDiBpc6+uU3sjSsAe6/UrwfE+uu6vPFyFTaitK5oHHIt2MDJHkJruyJLNtd3ooqtyXcf"

# Stage custom Mercurial distribution

- name: directory for offline pip packages
  file: path=/var/tmp/pip
        state=directory
        owner=root
        group=root
        mode=0750

- name: copy Mercurial source package from local machine
  copy: src={{ vct }}/extra-files/mercurial-4.5.3+9-1ed250f701ee.tar.gz
        dest=/var/tmp/pip/mercurial-4.5.3+9-1ed250f701ee.tar.gz
        owner=root
        group=root

# We run a lot of our Python out of our virtualenvs because that is how you
# are supposed to do Python.
- name: create virtualenv for hgweb
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_hgweb
           requirements=../roles/hg-web/files/requirements-hgweb.txt

- name: create virtualenv for replication
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_replication
           requirements=../roles/hg-web/files/requirements-replication.txt

- name: create virtualenv for tools
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_tools
           requirements=../roles/hg-web/files/requirements-tools.txt

- name: create virtualenv for Python 3 tools
  include: ../../../tasks/virtualenv3.yml
           python=/usr/bin/python3.6
           venv=/var/hg/venv_tools_py3
           requirements=../roles/hg-web/files/requirements-tools-py3.txt

# We have a chicken and egg problem with the prevent_hgweb_changes hook, which
# is globally installed. If the hook isn't present, Mercurial won't allow
# incoming changes. But the hook is part of v-c-t. How can we run a hook that
# may not be present? Our solution is to disable the hook when interacting
# with the v-c-t repo.
#
# The replicateowner extension doesn't work with https:// remotes, so it is disabled.
- name: clone version-control-tools repo (server only)
  command: /var/hg/venv_hgweb/bin/hg --config extensions.replicateowner=! --config hooks.precommit.prevent_changes=true --config hooks.pretxnchangegroup.prevent_changes=true clone -U https://hg.mozilla.org/hgcustom/version-control-tools /var/hg/version-control-tools creates=/var/hg/version-control-tools
  when: vct_dir.stat.exists == False

- name: pull version-control-tools (server only)
  command: /var/hg/venv_hgweb/bin/hg --config extensions.replicateowner=! --config hooks.precommit.prevent_changes=true --config hooks.pretxnchangegroup.prevent_changes=true -R /var/hg/version-control-tools pull https://hg.mozilla.org/hgcustom/version-control-tools
  when: vct_dir.stat.exists == False

- name: update version-control-tools revision (server only)
  command: /var/hg/venv_hgweb/bin/hg -R /var/hg/version-control-tools up -C {{ lookup('file', '../../../../.vctnode') }}
  when: vct_dir.stat.exists == False

- name: rsync version-control-tools repo (Docker only)
  command: /usr/bin/rsync -rlpt --delete-after /vct/ /var/hg/version-control-tools/
  when: vct_dir.stat.exists == True

- name: delete ignored files from version-control-tools repo (server only)
  command: /var/hg/venv_hgweb/bin/hg --config extensions.purge= -R /var/hg/version-control-tools purge --all
  when: vct_dir.stat.exists == False

- name: set up hg-experimental repo, with 3rd party extensions
  hg: repo=https://bitbucket.org/facebook/hg-experimental
      dest=/var/hg/hg-experimental
      revision=96a2689c228369c52904dc46aa124787090195d7
      force=yes
      purge=yes
      executable=/var/hg/venv_hgweb/bin/hg

- name: delete ignored files from hg-experimental repo
  command: /var/hg/venv_hgweb/bin/hg --config extensions.purge= -R /var/hg/hg-experimental purge --all

- name: build C extensions from hg-experimental repo
  command: /var/hg/venv_tools/bin/python setup.py build_py -c -d . build_clib build_ext -i chdir=/var/hg/hg-experimental

- name: install linelog C extension into hgweb virtualenv
  command: cp -a /var/hg/hg-experimental/linelog.so /var/hg/venv_hgweb/lib/python2.7/site-packages/linelog.so

# pip doesn't reinstall the same version unless --upgrade is passed.
# We need to pass --no-deps to prevent dependencies from getting pulled
# in. If we did pull in dependencies, there is a potential MITM since
# pip secures download of 3rd party packages.
# --force-reinstall is there for completeness.
- name: install vcsreplicator into virtualenv
  command: /var/hg/venv_replication/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/pylib/vcsreplicator

- name: install mozautomation into tools virtualenv
  command: /var/hg/venv_tools/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/pylib/mozautomation

# Various extensions and hooks reference Python packages provided by
# version-control-tools. Register links so all packages are available in
# virtualenvs.
- name: add packages to virtualens
  copy: dest=/var/hg/{{ item.venv }}/lib/python2.7/site-packages/{{ item.pth }}.pth
        content=/var/hg/version-control-tools/{{ item.path }}
        owner=root
        group=root
        mode=0644
  with_items:
    - { venv: venv_replication, path: hghooks, pth: mozhghooks }
    - { venv: venv_tools, path: hghooks, pth: mozhghooks }
    - { venv: venv_replication, path: pylib/mozhg, pth: mozhg }
    - { venv: venv_tools, path: pylib/mozhg, pth: mozhg }
    - { venv: venv_replication, path: hgserver/hgmolib, pth: hgmolib }

# Settings from this file are inherited by every hg command run on the
# system.
- name: install global hgrc
  copy: src=hgrc dest=/etc/mercurial/hgrc mode=0644 owner=root group=root

- name: install fastannotate hgrc recipe
  copy: src=hgrc-fastannotate
        dest=/etc/mercurial/hgrc-fastannotate
        mode=0644
        owner=root
        group=root

- name: write bloxtool config file
  template: src=bloxtool.ini.j2
            dest=/etc/mercurial/bloxtool.ini
            mode=0400
            owner=hg
            group=hg


# We control httpd.conf for features like server-status
- name: install httpd.conf file
  template: src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf

- name: directory for httpd logs
  file: path=/var/log/httpd/hg.mozilla.org
        state=directory
        owner=root
        group=root
        mode=0755

- name: install mirror-pull script
  template: src=mirror-pull.j2
            dest=/usr/local/bin/mirror-pull
            owner=root
            group=root
            mode=0755

- name: install scripts for supporting replication
  copy: src={{ item }}
        dest=/usr/local/bin/{{ item }}
        owner=root
        group=root
        mode=0755
  with_items:
    - lockfile

- name: install mirroring SSH key
  copy: dest=/etc/mercurial/mirror
        content="{{ mirror_private_key }}"
        owner=hg
        group=hg
        mode=0400

# We don't use the known_hosts module because it can't purge extra
# entries from the file. We should never have extra entries and extra
# entries could arguably be a security risk, so replacing the entire
# file content is acceptable.
- name: register SSH host keys for mirror host
  template: dest=/home/hg/.ssh/known_hosts
            src=known_hosts.j2
            owner=hg
            group=hg
            mode=640

# /repo/hg/webroot_wsgi has most of its content vendored inside
# version-control-tools. The content of the users/ directory is generated
# by a CRON that runs every few minutes.
- name: synchronize wsgi files
  command: /usr/bin/rsync -a --delete --filter='P users/' /var/hg/version-control-tools/hgwsgi/ /repo/hg/webroot_wsgi/

- name: set ownership of wsgi files
  command: /bin/chown -R hg:hg /repo/hg/webroot_wsgi

- name: install the script that creates user repo wsgi files
  copy: src=make_user_wsgi_dirs.sh dest=/usr/local/bin/make_user_wsgi_dirs.sh mode=0755

- name: install the cronjob that runs the user repo wsgi file creation script
  cron: minute="*/2" user=hg job="/usr/local/bin/make_user_wsgi_dirs.sh" name="Generate user wsgi files"

- name: add logrotate httpd config
  copy: src=logrotate.conf dest=/etc/logrotate.d/hg-httpd-logrotate

# Create and manage hg log resources
- name: make log dir
  file: path=/var/log/hg
        state=directory
        mode=0755
        owner=root
        group=root

- name: add logrotate hg config
  copy: src=logrotate.hg.conf dest=/etc/logrotate.d/hg

# TODO ideally this is integrated into logrotate.
# We schedule for UTC 0100 to catch any long-running requests that started
# on the previous UTC day.
- name: create CRON to generate daily Mercurial log files
  cron: name='Daily Mercurial log data'
        user=root
        job='/bin/nice -n 10 /var/hg/version-control-tools/scripts/outputif /var/hg/version-control-tools/hgext/serverlog/scripts/generate-daily-logs.py'
        day=*
        month=*
        minute=0
        hour=1

# logrotate is heavily biased towards rotating logs. We don't explicitly do
# rotation for /var/log/hg/parsed.YYYY-MM-DD, so logrotate doesn't work as a
# tool. We've written out own script to do the compression and deletion.

- name: create CRON to compress and delete old parsed Mercurial log files
  cron: name='Clean old parsed Mercurial logs'
        user=root
        job='/var/hg/version-control-tools/scripts/outputif /var/hg/version-control-tools/scripts/cleanup-parsed-hg-logs'
        day=*
        month=*
        minute=12
        hour=2

- include: ../../../tasks/systemd-mail-unit-output.yml
  when: vct_dir.stat.exists == False

- name: create directory mail-unit-output override file
  file: path=/etc/systemd/system/mail-unit-output@.service.d
        state=directory
        owner=root
        group=root
        mode=0755

- name: install mail-unit-output override
  copy: src=mail-unit-output-override.conf
        dest=/etc/systemd/system/mail-unit-output@.service.d/override.conf
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

# moz.build evaluation occurs in a chroot with a specific control group
# to limit potential for danger. We have a dedicated user and establish
# a cgroup policy that all processes for that user go in the limited
# cgroup.
#
# This doesn't currently work in Docker because we don't have cgroups
# exposed to our Docker containers.

- name: create mozbuild user
  user: name=mozbuild

- name: control group for mozbuild evaluation
  copy: src=cgconfig-mozbuild.conf
        dest=/etc/cgconfig.d/mozbuild.conf
        owner=root
        group=root
        mode=0664
  notify: restart cgconfig

- name: configure cgconfig to run at system startup
  command: /usr/bin/systemctl enable cgconfig.service
  when: vct_dir.stat.exists == False

- name: install control group rules
  copy: src=cgrules.conf
        dest=/etc/cgrules.conf
        owner=root
        group=root
        mode=0664

- name: start control group rules service
  service: name=cgred state=started enabled=yes
  when: vct_dir.stat.exists == False

- name: directories for mozbuild chroot
  file: path={{ item }} state=directory owner=root group=root mode=0775
  with_items:
    - /repo/hg/chroot_mozbuild

# Files dropped from the chroot will still exist. This shouldn't be
# problematic. Ignore it until it becomes a problem.
- name: upload and extract chroot archive
  unarchive: src={{ vct }}/chroot_mozbuild/chroot.tar.gz
             dest=/repo/hg/chroot_mozbuild
  when: chroot_mozbuild_exists

# It is important for this binary to be located *outside* the chroot
# because if code inside the chroot is able to modify the binary, it
# will be able to execute as root given the caps policy
# Group ownership of "hg" allows hgweb processes to run executable.
- name: upload chroot evaluator binary
  copy: src={{ vct }}/chroot_mozbuild/mozbuild-eval
        dest=/usr/local/bin/mozbuild-eval
        owner=root
        group=hg
        mode=0750
  when: chroot_mozbuild_exists

- name: give mozbuild-eval elevated privileges
  command: "/usr/sbin/setcap cap_sys_admin,cap_sys_chroot,cap_setuid,cap_setgid=+ep /usr/local/bin/mozbuild-eval"
  when: chroot_mozbuild_exists

- name: install sudoers policy for mozbuild-eval
  copy: src=sudoers-mozbuild-eval
        dest=/etc/sudoers.d/mozbuild-eval
        owner=root
        group=root
        mode=0440

- name: mount point for repos
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo/hg/chroot_mozbuild/repo/hg/mozilla

# In order to get a read-only bind mount, we have to first do a regular
# bind mount then do a remount. This is managed by multiple systemd units.
- name: systemd unit files for repo bind bound (servers only)
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False
  with_items:
    - repo_local-mozilla-chroot_mozbuild-repo-hg-mozilla.mount
    - repo_local-mozilla-chroot_mozbuild-dev.mount
    - repo_local-mozilla-chroot_mozbuild-dev-urandom.service
    - hg-bind-mount.service

- name: main bind mount unit is enabled (server only)
  service: name=hg-bind-mount.service
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False

- name: synchronize hg templates
  command: /usr/bin/rsync -a --delete-after /var/hg/version-control-tools/hgtemplates/ /repo/hg/hg_templates/

- name: advertise current v-c-t changeset in hgweb
  replace: dest=/repo/hg/hg_templates/gitweb_mozilla/footer.tmpl
           regexp={{ item.search }}
           replace={{ item.replace }}
  with_items:
    - { search: VCTNODE, replace: "{{ vct_node | mandatory }}" }
    - { search: DEPLOYDATE, replace: "{{ ansible_date_time.iso8601 }}" }

- name: adjust file permissions for hg templates
  command: /bin/chown -R hg:hg /repo/hg/hg_templates

- name: directory for Firefox release scraper
  file: path=/var/hg/fxreleases
        state=directory
        owner=hg
        group=hg
        mode=0775

- name: systemd service files for firefox release scraper (server only)
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - firefox-release-scraper.service
    - firefox-release-scraper.timer
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: firefox release scraper service enabled (server only)
  service: name=firefox-release-scraper.timer
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False


- name: systemd service files for Mozilla IP scraper
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - mozilla-ip-scraper.service
    - mozilla-ip-scraper.timer
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: Mozilla IP scraper service enabled (server only)
  service: name=mozilla-ip-scraper.timer
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False


- name: systemd service files for AWS IP scraper
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - aws-ip-scraper.service
    - aws-ip-scraper.timer
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: AWS IP scraper service enabled (server only)
  service: name=aws-ip-scraper.timer
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False

- name: Run AWS IP scrape to get latest (server only)
  service: name=aws-ip-scraper.service
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False


- name: install vcsreplicator config
  template: src="{{ item }}.j2"
            dest=/etc/mercurial/{{ item }}
            owner=root
            group=root
            mode=0644
  with_items:
    - vcsreplicator.ini
    - vcsreplicator-pending.ini

- name: directory for vcsreplicator logs
  file: path=/var/log/vcsreplicator
        state=directory
        owner=root
        group=root
        mode=0755

- name: directory for repos deleted through vcsreplicator
  file: path=/repo/hg/todelete
        owner=hg
        group=hg
        mode=0750
        state=directory

- name: systemd service file for vcsreplicator
  copy: src=vcsreplicator@.service
        dest=/etc/systemd/system/vcsreplicator@.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: vcsreplicator service is enabled (server only)
  service: name=vcsreplicator@{{ item }}.service
           enabled=yes
  with_items:
    - '0'
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
    - '6'
    - '7'
  when: vct_dir.stat.exists == False

- name: restart vcsreplicator daemons (server only)
  command: /usr/bin/systemctl restart vcsreplicator@*.service
  when: vct_dir.stat.exists == False

- name: systemd service file for vcsreplicator-heads
  copy: src=vcsreplicator-heads.service
        dest=/etc/systemd/system/vcsreplicator-heads.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: vcsreplicator-heads service is enabled (server only)
  service: name=vcsreplicator-heads.service
           enabled=yes
  when: vct_dir.stat.exists == False

- name: restart vcsreplicator-heads daemon (server only)
  command: /usr/bin/systemctl restart vcsreplicator-heads.service
  when: vct_dir.stat.exists == False

- name: create Nagios config directory
  file: path=/etc/nagios/nrpe.d
        state=directory
        owner=root
        group=root
        mode=0755

- name: install check_vcsreplicator_lag NRPE config
  copy: src={{ item }}
        dest=/etc/nagios/nrpe.d/{{ item }}
        owner=root
        group=root
        mode=0644
  notify: restart nrpe
  with_items:
    - check_vcsreplicator_lag.cfg
    - check_vcsreplicator_pending_lag.cfg

# Needs to come near end for fresh server provisioning scenario to work
# right.
- name: ensure httpd service enabled and running (server only)
  service: name=httpd.service
           enabled=yes
           state=started
  # Don't do this on Docker because it has its own mechanism for
  # starting.
  when: vct_dir.stat.exists == False
